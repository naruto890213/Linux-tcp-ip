注册关键字
__setup(string, function_handler) //string是关键字，而function_handler是相关联的处理函数，string必须以=字符作结束，以使parse_args的解析能轻松一点
__setup("netdev=", netdev_boot_setup) //(net/core/dev.c)以netdev为例的demo

#define __setup(str, fn) __setup_param(str, fn, fn, 0)

|-->static initcall_t *initcall_levels[] __initdata = {
    __initcall0_start,
    __initcall1_start,
    __initcall2_start,
    __initcall3_start,
    __initcall4_start,
    __initcall5_start,
    __initcall6_start,
    __initcall7_start,
    __initcall_end,
}; //(init/main.c) 全局变量，用于存放不同的节区数据

|-->#define INIT_SETUP(initsetup_align)                 \
        . = ALIGN(initsetup_align);             \
        VMLINUX_SYMBOL(__setup_start) = .;          \
        KEEP(*(.init.setup))                    \
        VMLINUX_SYMBOL(__setup_end) = .; //(include/asm-generic/vmlinux.lds.h)

|-->#define INIT_CALLS_LEVEL(level)                     \
        VMLINUX_SYMBOL(__initcall##level##_start) = .;      \
        KEEP(*(.initcall##level##.init))            \
        KEEP(*(.initcall##level##s.init))           \ //(include/asm-generic/vmlinux.lds.h)

|-->#define INIT_CALLS                          \
        VMLINUX_SYMBOL(__initcall_start) = .;           \
        KEEP(*(.initcallearly.init))                \
        INIT_CALLS_LEVEL(0)                 \
        INIT_CALLS_LEVEL(1)                 \
        INIT_CALLS_LEVEL(2)                 \
        INIT_CALLS_LEVEL(3)                 \
        INIT_CALLS_LEVEL(4)                 \
        INIT_CALLS_LEVEL(5)                 \
        INIT_CALLS_LEVEL(rootfs)                \
        INIT_CALLS_LEVEL(6)                 \
        INIT_CALLS_LEVEL(7)                 \
        VMLINUX_SYMBOL(__initcall_end) = .; //(include/asm-generic/vmlinux.lds.h)
//从上面的宏可以看出 __initcallN_start 即等于 __initcallN_init

|-->do_initcalls //(init/main.c) 执行初始化操作(初始.initcallN.init内存节区)
	|-->for (level = 0; level < ARRAY_SIZE(initcall_levels) - 1; level++)
		|-->do_initcall_level(level) 

|-->do_initcall_level //(init/main.c)
	|-->parse_args(initcall_level_names[level],
           initcall_command_line, __start___param,
           __stop___param - __start___param,
           level, level,
           NULL, &repair_env_string)
		   
	|-->for (fn = initcall_levels[level]; fn < initcall_levels[level+1]; fn++) //遍历初始化列表，进行初始化操作
		|-->do_one_initcall(*fn)
		
|-->do_one_initcall //(init/main.c) 初始化单个节点
	|-->initcall_blacklisted(fn)
	|-->ret = fn() //执行回调函数
	|-->if (preempt_count() != count) //查看是否抢占
		|-->preempt_count_set(count) 
		
	|-->irqs_disabled() //关闭中断
	|-->local_irq_enable() //开启中断
	|-->add_latent_entropy //
		
		
|-->parse_early_param //(init/main.c)
	|-->strlcpy(tmp_cmdline, boot_command_line, COMMAND_LINE_SIZE)
	|-->parse_early_options(tmp_cmdline)
		|-->parse_args("early options", cmdline, NULL, 0, 0, 0, NULL, do_early_param)
		
early_param			__setup			__obsolete_setup
	|					|					|
	|					|					|
	|					|					|
	|------------------>|<-------------------
						|
						V
					__setup_param
						|
						|
						V
				".init.setup" 节区
				
|-->early_param //(include/linux/init.h)
	|-->__setup_param //(include/linux/init.h)
		|-->__section(.init.setup) //放入节区 ".init.setup"
				
				
|-->struct obs_kernel_param {
    const char *str; //关键字
    int (*setup_func)(char *); //处理函数
    int early; //标识
}; //(include/linux/init.h)

|-->struct netdev_boot_setup {
    char 	name[IFNAMSIZ];
    struct 	ifmap map;
}; //(include/linux/netdevice.h)

|-->netdev_boot_setup //(net/core/dev.c)
	|-->get_options(str, ARRAY_SIZE(ints), ints)
	|-->if (ints[0] > 0)
		|-->map.irq = ints[1]
		
	|-->if (ints[0] > 1)
		|-->map.base_addr = ints[2]
		
	|-->if (ints[0] > 2)
		|-->map.mem_start = ints[3]
		
	|-->if (ints[0] > 3)
		|-->map.mem_end = ints[4]
		
	|-->netdev_boot_setup_add(str, &map) //(net/core/dev.c)
		|-->s = dev_boot_setup
		|-->for (i = 0; i < NETDEV_BOOT_SETUP_MAX; i++)
			|-->if (s[i].name[0] == '\0' || s[i].name[0] == ' ')
				|-->strlcpy(s[i].name, name, IFNAMSIZ)
				|-->memcpy(&s[i].map, map, sizeof(s[i].map))
				
		|-->return i >= NETDEV_BOOT_SETUP_MAX ? 0 : 1
		
		
xxx_initcall宏 //(include/linux/init.h) 具体参见该文件, 这些宏最终将填写如内存节区.initcallN.init中
|-->subsys_initcall //(include/linux/init.h)
	|-->__define_initcall //(include/linux/init.h)
		|-->__attribute__((__section__(".initcall" #id ".init"))) = fn
		

|-->__initcall(fn) //(include/linux/init.h)
	|-->device_initcall(fn) //(include/linux/init.h)
		|-->__define_initcall(fn, 6)
		
|-->__exitcall(fn) //(include/linux/init.h)
	|-->__exitcall_##fn __exit_call = fn //(include/linux/init.h)
		|-->__section(.exitcall.exit) //(include/linux/init.h)
		
|-->struct Qdisc noop_qdisc = {
    .enqueue    =   noop_enqueue,
    .dequeue    =   noop_dequeue,
    .flags      =   TCQ_F_BUILTIN,
    .ops        =   &noop_qdisc_ops,
    .q.lock     =   __SPIN_LOCK_UNLOCKED(noop_qdisc.q.lock),
    .dev_queue  =   &noop_netdev_queue,
    .running    =   SEQCNT_ZERO(noop_qdisc.running),
    .busylock   =   __SPIN_LOCK_UNLOCKED(noop_qdisc.busylock),
}; //(net/sched/sch_generic.c)

|-->dev_activate //(net/sched/sch_generic.c) 初始化由流量控制使用的出口队列
	|-->if (dev->qdisc == &noop_qdisc)
		|-->attach_default_qdiscs(dev)
		
	|-->netdev_for_each_tx_queue(dev, transition_one_qdisc, &need_watchdog)
	|-->if (dev_ingress_queue(dev))
		|-->transition_one_qdisc(dev, dev_ingress_queue(dev), NULL)
		
	|-->if (need_watchdog) //是否开启看门狗
		|-->netif_trans_update(dev)
		|-->dev_watchdog_up(dev) 
		
		
|-->attach_default_qdiscs //(net/sched/sch_generic.c) 默认流处理
	|-->txq = netdev_get_tx_queue(dev, 0)
	|-->if (!netif_is_multiqueue(dev) || dev->priv_flags & IFF_NO_QUEUE) //不为多播且无队列
		|-->netdev_for_each_tx_queue(dev, attach_one_default_qdisc, NULL)
		|-->dev->qdisc = txq->qdisc_sleeping
		|-->qdisc_refcount_inc(dev->qdisc)
		
	|-->else //不满足上面的条件时进行这条分支
		|-->qdisc = qdisc_create_dflt(txq, &mq_qdisc_ops, TC_H_ROOT)
		|-->if (qdisc) //创建成功
			|-->dev->qdisc = qdisc
			|-->qdisc->ops->attach(qdisc)
			
			
|-->transition_one_qdisc //(net/sched/sch_generic.c)
	|-->
	
	
//3c59x 网卡实例
|-->static struct pci_driver vortex_driver = {
    .name       = "3c59x",
    .probe      = vortex_init_one,
    .remove     = vortex_remove_one,
    .id_table   = vortex_pci_tbl,
    .driver.pm  = VORTEX_PM_OPS, //操作处理回调函数列表
}; //(drivers/net/ethernet/3com/3c59x.c)

|-->static const struct dev_pm_ops vortex_pm_ops = {
    .suspend = vortex_suspend, //挂起设备操作处理函数
    .resume = vortex_resume,
    .freeze = vortex_suspend,
    .thaw = vortex_resume,
    .poweroff = vortex_suspend,
    .restore = vortex_resume,
}; //(drivers/net/ethernet/3com/3c59x.c)

|-->#define VORTEX_PM_OPS (&vortex_pm_ops)

|-->vortex_suspend //(drivers/net/ethernet/3com/3c59x.c) 设备挂起操作
	|-->netif_device_detach(ndev)
	|-->vortex_down(ndev, 1)
	
|-->netif_device_detach //(net/core/dev.c)
	|-->if (test_and_clear_bit(__LINK_STATE_PRESENT, &dev->state) && netif_running(dev)) //清除dev->state中的__LINK_STATE_PRESENT标识
		|-->netif_tx_stop_all_queues(dev) //如果传输已经开启则关闭其出口队列
		

|-->vortex_resume //(drivers/net/ethernet/3com/3c59x.c) 设备重新继续
	|-->vortex_up(ndev)
	|-->netif_device_attach(ndev) //(net/core/dev.c)
		|-->if (!test_and_set_bit(__LINK_STATE_PRESENT, &dev->state) && netif_running(dev)) //设置dev->state为__LINK_STATE_PRESENT
			|-->netif_tx_wake_all_queues(dev) //唤醒队列
			|-->__netdev_watchdog_up(dev) //唤醒看门狗
			
			
|-->netif_carrier_on //(net/sched/sch_generic.c) 检测设备上有载波时调用该函数设置状态
	|-->if (test_and_clear_bit(__LINK_STATE_NOCARRIER, &dev->state)) //将dev->state的状态__LINK_STATE_NOCARRIER清空
		|-->if (dev->reg_state == NETREG_UNINITIALIZED) //当设备未注册时直接返回
			|-->return
			
		|-->atomic_inc(&dev->carrier_changes) //递增引用计数
		|-->linkwatch_fire_event(dev) //产生一个链接状态变更事件
		|-->if (netif_running(dev))
			|-->__netdev_watchdog_up(dev)
			
			
|-->linkwatch_fire_event //(net/core/link_watch.c)
	|-->linkwatch_urgent_event(dev)
	|-->if (!test_and_set_bit(__LINK_STATE_LINKWATCH_PENDING, &dev->state)) //清空位置__LINK_STATE_LINKWATCH_PENDING
		|-->linkwatch_add_event(dev) //添加事件到队列中
		
	|-->linkwatch_schedule_work(urgent) //(net/core/link_watch.c)
	
	
|-->netif_carrier_off //(net/sched/sch_generic.c) 载波缺失时的处理函数
	|-->if (!test_and_set_bit(__LINK_STATE_NOCARRIER, &dev->state)) //设置位__LINK_STATE_NOCARRIER
        |-->if (dev->reg_state == NETREG_UNINITIALIZED) //如果为注册
			|-->return //直接返回退出
			
		|-->atomic_inc(&dev->carrier_changes)
		|-->linkwatch_fire_event(dev)
		
	
|-->linkwatch_run_queue //(net/core/link_watch.c)
	|-->__linkwatch_run_queue(0) //(net/core/link_watch.c)
		|-->time_after(linkwatch_nextevent, jiffies + HZ) //等待1S
		|-->clear_bit(LW_URGENT, &linkwatch_flags)
		|-->spin_lock_irq(&lweventlist_lock) //加锁
		|-->list_splice_init(&lweventlist, &wrk)
		|-->while (!list_empty(&wrk))
			|-->dev = list_first_entry(&wrk, struct net_device, link_watch_list)
			|-->list_del_init(&dev->link_watch_list) //从队列中删除设备
			|-->spin_unlock_irq(&lweventlist_lock)
			|-->linkwatch_do_dev(dev)
			|-->spin_lock_irq(&lweventlist_lock)
			
		|-->if (!list_empty(&lweventlist))
			|-->linkwatch_schedule_work(0)
		|-->spin_unlock_irq(&lweventlist_lock) //解锁
		
		
|-->linkwatch_do_dev //(net/core/link_watch.c) 处理载波
	|-->smp_mb__before_atomic()
	|-->clear_bit(__LINK_STATE_LINKWATCH_PENDING, &dev->state) //清空位
	|-->if (dev->flags & IFF_UP)
		|-->if (netif_carrier_ok(dev)) //有载波
			|-->dev_activate(dev)
		|-->else //没有检查到载波
			|-->dev_deactivate(dev)
			
		|-->netdev_state_change(dev) //设置状态
		
	|-->dev_put(dev)
	
	
|-->inet_ioctl //(net/ipv4/af_inet.c) ethtool工具(主要是ipv4 用于与内核的交互)
	|-->switch (cmd)
		|-->case SIOCGSTAMP:
			|-->err = sock_get_timestamp(sk, (struct timeval __user *)arg);
			|-->break;
		|-->case SIOCGSTAMPNS:
			|-->err = sock_get_timestampns(sk, (struct timespec __user *)arg);
			|-->break;
		|-->case SIOCADDRT:
		|-->case SIOCDELRT:
		|-->case SIOCRTMSG:
			|-->err = ip_rt_ioctl(net, cmd, (void __user *)arg);
			|-->break;
		|-->case SIOCDARP:
		|-->case SIOCGARP:
		|-->case SIOCSARP:
			|-->err = arp_ioctl(net, cmd, (void __user *)arg);
			|-->break;
		|-->case SIOCGIFADDR:
		|-->case SIOCSIFADDR:
		|-->case SIOCGIFBRDADDR:
		|-->case SIOCSIFBRDADDR:
		|-->case SIOCGIFNETMASK:
		|-->case SIOCSIFNETMASK:
		|-->case SIOCGIFDSTADDR:
		|-->case SIOCSIFDSTADDR:
		|-->case SIOCSIFPFLAGS:
		|-->case SIOCGIFPFLAGS:
		|-->case SIOCSIFFLAGS:
			|-->err = devinet_ioctl(net, cmd, (void __user *)arg);
			|-->break;
		|-->default:
			|-->if (sk->sk_prot->ioctl)
				|-->err = sk->sk_prot->ioctl(sk, cmd, arg);
			|-->else
				|-->err = -ENOIOCTLCMD;
			
		return err
		
|-->devinet_ioctl //(net/ipv4/devinet.c)


|-->inet6_ioctl //(net/ipv6/af_inet6.c) ethtool工具(主要是ipv6 用于与内核的交互)
	|-->switch (cmd)
		|-->case SIOCGSTAMP:
			|-->return sock_get_timestamp(sk, (struct timeval __user *)arg);

		|-->case SIOCGSTAMPNS:
			|-->return sock_get_timestampns(sk, (struct timespec __user *)arg);

		|-->case SIOCADDRT:
		|-->case SIOCDELRT:
			|-->return ipv6_route_ioctl(net, cmd, (void __user *)arg);

		|-->case SIOCSIFADDR:
			|-->return addrconf_add_ifaddr(net, (void __user *) arg);
			
		|-->case SIOCDIFADDR:
			|-->return addrconf_del_ifaddr(net, (void __user *) arg);
			
		|-->case SIOCSIFDSTADDR:
			|-->return addrconf_set_dstaddr(net, (void __user *) arg);
			
		|-->default:
			|-->if (!sk->sk_prot->ioctl)
				|-->return -ENOIOCTLCMD;
				
			|-->return sk->sk_prot->ioctl(sk, cmd, arg);
	
    |-->return 0;
	
	
|-->generic_mii_ioctl //(drivers/net/mii.c)
	|-->mii_data->phy_id &= mii_if->phy_id_mask
	|-->mii_data->reg_num &= mii_if->reg_num_mask
	|-->switch(cmd)
		|-->case SIOCGMIIPHY:
			|-->mii_data->phy_id = mii_if->phy_id
			
		|-->case SIOCGMIIREG:
			|-->mii_data->val_out = mii_if->mdio_read(mii_if->dev, mii_data->phy_id, mii_data->reg_num)
			
		|-->case SIOCSMIIREG:
			|-->val = mii_data->val_in
			|-->if (mii_data->phy_id == mii_if->phy_id)
				|-->switch(mii_data->reg_num)
					|-->case MII_BMCR:
						|-->
						
					|-->case MII_ADVERTISE:
						|-->mii_if->advertising = val
						
			|-->mii_if->mdio_write(mii_if->dev, mii_data->phy_id, mii_data->reg_num, val)